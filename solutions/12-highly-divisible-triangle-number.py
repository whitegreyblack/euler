# problem 12
# highly divisible triangle number
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1:  1: 1
2:  3: 1,3
3:  6: 1,2,3,6
4: 10: 1,2,5,10
5: 15: 1,3,5,15
6: 21: 1,3,7,21
7: 28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import math
import functools as fn
fs_cache = {}
def factors(x):
    divisors = []
    for i in range(1, int(x**0.5) + 1):
        if x % i == 0:
            divisors.append([i, x // i])
    return set(fn.reduce(list.__add__, divisors))
nn_cache = {}    
def natural_numbers(x): # x is the index
    if x not in nn_cache:
        if x == 0:
            nn_cache[x] = x
        else:
            nn_cache[x] = x + natural_numbers(x-1)
    return nn_cache[x]
max_fs = 500
x = 1
nat = natural_numbers(x)
fs = list(factors(nat))
l = len(fs)
while l < max_fs:
    x += 1
    nat = natural_numbers(x)
    fs = list(factors(nat))
    l = len(fs)
print(nat)

